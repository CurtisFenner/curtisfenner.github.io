from numpy import linalg, array
import math

"""
R_C (ohm), R_B (ohm) | V_C, V_B, V_E | I_C (mA), I_E (mA)
Battery at 6.26 V at beginning; at 6.21 V at end
"""
table = [
    [1000000, 330, 0.017, 0.839, 0.006, 16.2],
    [1000000, 470, 0.0145, 0.822, 0.006, 11.4],
    [1000000, 1000, 0.0109, 0.786, 0.006, 5.41],
    [1000000, 6800, 0.0111, 0.701, 0.006, 0.82],
    [1000000, 10000, 0.0126, 0.684, 0.006, 0.56],
    [330, 330, 0.0463, 0.854, 18.4, 34.4],
    [330, 470, 0.0465, 0.839, 18.4, 29.6],
    [330, 1000, 0.0517, 0.810, 18.4, 23.8],
    [330, 6800, 0.1056, 0.765, 17.92, 18.67],
    [330, 10000, 0.126, 0.762, 18.3, 18.8],
    [470, 330, 0.038, 0.850, 12.74, 28.9],
    [470, 470, 0.0374, 0.832, 12.76, 24.2],
    [470, 1000, 0.0405, 0.802, 12.78, 17.88],
    [470, 6800, 0.0853, 0.754, 12.9, 13.7],
    [470, 10000, 0.1023, 0.749, 12.70, 13.22],
    [1000, 330, 0.0274, 0.843, 6.12, 22.2],
    [1000, 470, 0.0258, 0.826, 6.12, 17.04],
    [1000, 1000, 0.0258, 0.794, 6.15, 11.40],
    [1000, 6800, 0.0559, 0.733, 6.12, 6.90],
    [1000, 10000, 0.0691, 0.728, 6.11, 6.64],
    [6800, 330, 0.0189, 0.837, 0.886, 16.55],
    [6800, 470, 0.0164, 0.820, 0.891, 12.09],
    [6800, 1000, 0.0133, 0.784, 0.893, 6.29],
    [6800, 6800, 0.0211, 0.706, 0.894, 1.71],
    [6800, 10000, 0.0269, 0.693, 0.893, 1.46],
    [10000, 330, 0.0185, 0.837, 0.610, 16.33],
    [10000, 470, 0.0158, 0.82, 0.612, 11.81],
    [10000, 1000, 0.0125, 0.783, 0.614, 5.98],
    [10000, 6800, 0.0181, 0.703, 0.615, 1.43],
    [10000, 10000, 0.0230, 0.689, 0.614, 1.17]
]

xs = [row[3] for row in table]
ys = [row[3] - row[2] for row in table]
zs = [row[5] for row in table]


def solve(k):
    v1s = [math.exp(k * x) - 1 for x in xs]
    v2s = [math.exp(k * x) - 1 for x in ys]
    A = [[a, b] for a, b in zip(v1s, v2s)]
    ans, resid, rank, sing = linalg.lstsq(A, zs, rcond=None)

    for row in table:
        actual = row[5]
        a = math.exp(k * row[3]) - 1
        b = math.exp(k * (row[3] - row[2])) - 1
        predicted = a * ans[0] + b * ans[1]
        print(actual, predicted)

    print("ANS:", ans)
    return ans


solve(35)
